// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetEventContextOKBody The events and state surrounding the requested event.
// swagger:model getEventContextOKBody
type GetEventContextOKBody struct {

	// A token that can be used to paginate forwards with.
	End string `json:"end,omitempty"`

	// event
	Event *GetEventContextOKBodyEvent `json:"event,omitempty"`

	// A list of room events that happened just after the
	// requested event, in chronological order.
	EventsAfter []*GetEventContextOKBodyEventsAfterItems `json:"events_after"`

	// A list of room events that happened just before the
	// requested event, in reverse-chronological order.
	EventsBefore []*GetEventContextOKBodyEventsBeforeItems `json:"events_before"`

	// A token that can be used to paginate backwards with.
	Start string `json:"start,omitempty"`

	// The state of the room at the last event returned.
	State []*GetEventContextOKBodyStateItems `json:"state"`
}

// Validate validates this get event context o k body
func (m *GetEventContextOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventsAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventsBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEventContextOKBody) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *GetEventContextOKBody) validateEventsAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.EventsAfter) { // not required
		return nil
	}

	for i := 0; i < len(m.EventsAfter); i++ {
		if swag.IsZero(m.EventsAfter[i]) { // not required
			continue
		}

		if m.EventsAfter[i] != nil {
			if err := m.EventsAfter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events_after" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetEventContextOKBody) validateEventsBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.EventsBefore) { // not required
		return nil
	}

	for i := 0; i < len(m.EventsBefore); i++ {
		if swag.IsZero(m.EventsBefore[i]) { // not required
			continue
		}

		if m.EventsBefore[i] != nil {
			if err := m.EventsBefore[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events_before" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetEventContextOKBody) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	for i := 0; i < len(m.State); i++ {
		if swag.IsZero(m.State[i]) { // not required
			continue
		}

		if m.State[i] != nil {
			if err := m.State[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEventContextOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEventContextOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventContextOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
