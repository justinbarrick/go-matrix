// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRoomParamsBody create room params body
// swagger:model createRoomParamsBody
type CreateRoomParamsBody struct {

	// CreationContent
	//
	// Extra keys to be added to the content of the ``m.room.create``.
	// The server will clobber the following keys: ``creator``. Future
	// versions of the specification may allow the server to clobber
	// other keys.
	CreationContent interface{} `json:"creation_content,omitempty"`

	// A list of state events to set in the new room. This allows
	// the user to override the default state events set in the new
	// room. The expected format of the state events are an object
	// with type, state_key and content keys set.
	//
	// Takes precedence over events set by ``presets``, but gets
	// overriden by ``name`` and ``topic`` keys.
	InitialState []*CreateRoomParamsBodyInitialStateItems `json:"initial_state"`

	// A list of user IDs to invite to the room. This will tell the
	// server to invite everyone in the list to the newly created room.
	Invite []string `json:"invite"`

	// A list of objects representing third party IDs to invite into
	// the room.
	Invite3pid []*CreateRoomParamsBodyInvite3pidItems `json:"invite_3pid"`

	// This flag makes the server set the ``is_direct`` flag on the
	// ``m.room.member`` events sent to the users in ``invite`` and
	// ``invite_3pid``. See `Direct Messaging`_ for more information.
	IsDirect bool `json:"is_direct,omitempty"`

	// If this is included, an ``m.room.name`` event will be sent
	// into the room to indicate the name of the room. See Room
	// Events for more information on ``m.room.name``.
	Name string `json:"name,omitempty"`

	// Convenience parameter for setting various default state events
	// based on a preset. Must be either:
	//
	// ``private_chat`` =>
	//   ``join_rules`` is set to ``invite``.
	//   ``history_visibility`` is set to ``shared``.
	//
	// ``trusted_private_chat`` =>
	//     ``join_rules`` is set to ``invite``.
	//     ``history_visibility`` is set to ``shared``.
	//     All invitees are given the same power level as the room creator.
	//
	// ``public_chat``: =>
	//     ``join_rules`` is set to ``public``.
	//     ``history_visibility`` is set to ``shared``.
	// Enum: [private_chat public_chat trusted_private_chat]
	Preset string `json:"preset,omitempty"`

	// The desired room alias **local part**. If this is included, a
	// room alias will be created and mapped to the newly created
	// room. The alias will belong on the *same* homeserver which
	// created the room. For example, if this was set to "foo" and
	// sent to the homeserver "example.com" the complete room alias
	// would be ``#foo:example.com``.
	RoomAliasName string `json:"room_alias_name,omitempty"`

	// If this is included, an ``m.room.topic`` event will be sent
	// into the room to indicate the topic for the room. See Room
	// Events for more information on ``m.room.topic``.
	Topic string `json:"topic,omitempty"`

	// A ``public`` visibility indicates that the room will be shown
	// in the published room list. A ``private`` visibility will hide
	// the room from the published room list. Rooms default to
	// ``private`` visibility if this key is not included. NB: This
	// should not be confused with ``join_rules`` which also uses the
	// word ``public``.
	// Enum: [public private]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this create room params body
func (m *CreateRoomParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvite3pid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRoomParamsBody) validateInitialState(formats strfmt.Registry) error {

	if swag.IsZero(m.InitialState) { // not required
		return nil
	}

	for i := 0; i < len(m.InitialState); i++ {
		if swag.IsZero(m.InitialState[i]) { // not required
			continue
		}

		if m.InitialState[i] != nil {
			if err := m.InitialState[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initial_state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateRoomParamsBody) validateInvite3pid(formats strfmt.Registry) error {

	if swag.IsZero(m.Invite3pid) { // not required
		return nil
	}

	for i := 0; i < len(m.Invite3pid); i++ {
		if swag.IsZero(m.Invite3pid[i]) { // not required
			continue
		}

		if m.Invite3pid[i] != nil {
			if err := m.Invite3pid[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invite_3pid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createRoomParamsBodyTypePresetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private_chat","public_chat","trusted_private_chat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRoomParamsBodyTypePresetPropEnum = append(createRoomParamsBodyTypePresetPropEnum, v)
	}
}

const (

	// CreateRoomParamsBodyPresetPrivateChat captures enum value "private_chat"
	CreateRoomParamsBodyPresetPrivateChat string = "private_chat"

	// CreateRoomParamsBodyPresetPublicChat captures enum value "public_chat"
	CreateRoomParamsBodyPresetPublicChat string = "public_chat"

	// CreateRoomParamsBodyPresetTrustedPrivateChat captures enum value "trusted_private_chat"
	CreateRoomParamsBodyPresetTrustedPrivateChat string = "trusted_private_chat"
)

// prop value enum
func (m *CreateRoomParamsBody) validatePresetEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createRoomParamsBodyTypePresetPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateRoomParamsBody) validatePreset(formats strfmt.Registry) error {

	if swag.IsZero(m.Preset) { // not required
		return nil
	}

	// value enum
	if err := m.validatePresetEnum("preset", "body", m.Preset); err != nil {
		return err
	}

	return nil
}

var createRoomParamsBodyTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRoomParamsBodyTypeVisibilityPropEnum = append(createRoomParamsBodyTypeVisibilityPropEnum, v)
	}
}

const (

	// CreateRoomParamsBodyVisibilityPublic captures enum value "public"
	CreateRoomParamsBodyVisibilityPublic string = "public"

	// CreateRoomParamsBodyVisibilityPrivate captures enum value "private"
	CreateRoomParamsBodyVisibilityPrivate string = "private"
)

// prop value enum
func (m *CreateRoomParamsBody) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createRoomParamsBodyTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateRoomParamsBody) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRoomParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRoomParamsBody) UnmarshalBinary(b []byte) error {
	var res CreateRoomParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
