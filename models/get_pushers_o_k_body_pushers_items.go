// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetPushersOKBodyPushersItems Pusher
// swagger:model getPushersOKBodyPushersItems
type GetPushersOKBodyPushersItems struct {

	// A string that will allow the user to identify what application
	// owns this pusher.
	AppDisplayName string `json:"app_display_name,omitempty"`

	// This is a reverse-DNS style identifier for the application.
	// Max length, 64 chars.
	AppID string `json:"app_id,omitempty"`

	// data
	Data *GetPushersOKBodyPushersItemsData `json:"data,omitempty"`

	// A string that will allow the user to identify what device owns
	// this pusher.
	DeviceDisplayName string `json:"device_display_name,omitempty"`

	// The kind of pusher. ``"http"`` is a pusher that
	// sends HTTP pokes.
	Kind string `json:"kind,omitempty"`

	// The preferred language for receiving notifications (e.g. 'en'
	// or 'en-US')
	Lang string `json:"lang,omitempty"`

	// This string determines which set of device specific rules this
	// pusher executes.
	ProfileTag string `json:"profile_tag,omitempty"`

	// This is a unique identifier for this pusher. See `/set` for
	// more detail.
	// Max length, 512 bytes.
	Pushkey string `json:"pushkey,omitempty"`
}

// Validate validates this get pushers o k body pushers items
func (m *GetPushersOKBodyPushersItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPushersOKBodyPushersItems) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPushersOKBodyPushersItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPushersOKBodyPushersItems) UnmarshalBinary(b []byte) error {
	var res GetPushersOKBodyPushersItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
