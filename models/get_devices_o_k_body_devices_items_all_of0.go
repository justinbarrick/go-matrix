// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDevicesOKBodyDevicesItemsAllOf0 Device
//
// A client device
// swagger:model getDevicesOKBodyDevicesItemsAllOf0
type GetDevicesOKBodyDevicesItemsAllOf0 struct {

	// Identifier of this device.
	// Required: true
	DeviceID *string `json:"device_id"`

	// Display name set by the user for this device. Absent if no name has been
	// set.
	DisplayName string `json:"display_name,omitempty"`

	// The IP address where this device was last seen. (May be a few minutes out
	// of date, for efficiency reasons).
	LastSeenIP string `json:"last_seen_ip,omitempty"`

	// The timestamp (in milliseconds since the unix epoch) when this devices
	// was last seen. (May be a few minutes out of date, for efficiency
	// reasons).
	LastSeenTs int64 `json:"last_seen_ts,omitempty"`
}

// Validate validates this get devices o k body devices items all of0
func (m *GetDevicesOKBodyDevicesItemsAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDevicesOKBodyDevicesItemsAllOf0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDevicesOKBodyDevicesItemsAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDevicesOKBodyDevicesItemsAllOf0) UnmarshalBinary(b []byte) error {
	var res GetDevicesOKBodyDevicesItemsAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
