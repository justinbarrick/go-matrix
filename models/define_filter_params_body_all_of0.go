// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DefineFilterParamsBodyAllOf0 define filter params body all of0
// swagger:model defineFilterParamsBodyAllOf0
type DefineFilterParamsBodyAllOf0 struct {

	// account data
	AccountData *DefineFilterParamsBodyAllOf0AccountData `json:"account_data,omitempty"`

	// List of event fields to include. If this list is absent then all fields are included. The entries may include '.' charaters to indicate sub-fields. So ['content.body'] will include the 'body' field of the 'content' object. A literal '.' character in a field name may be escaped using a '\\'. A server may include more fields than were requested.
	EventFields []string `json:"event_fields"`

	// The format to use for events. 'client' will return the events in a format suitable for clients. 'federation' will return the raw event as receieved over federation. The default is 'client'.
	// Enum: [client federation]
	EventFormat string `json:"event_format,omitempty"`

	// presence
	Presence *DefineFilterParamsBodyAllOf0Presence `json:"presence,omitempty"`

	// room
	Room *DefineFilterParamsBodyAllOf0Room `json:"room,omitempty"`
}

// Validate validates this define filter params body all of0
func (m *DefineFilterParamsBodyAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefineFilterParamsBodyAllOf0) validateAccountData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountData) { // not required
		return nil
	}

	if m.AccountData != nil {
		if err := m.AccountData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_data")
			}
			return err
		}
	}

	return nil
}

var defineFilterParamsBodyAllOf0TypeEventFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client","federation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		defineFilterParamsBodyAllOf0TypeEventFormatPropEnum = append(defineFilterParamsBodyAllOf0TypeEventFormatPropEnum, v)
	}
}

const (

	// DefineFilterParamsBodyAllOf0EventFormatClient captures enum value "client"
	DefineFilterParamsBodyAllOf0EventFormatClient string = "client"

	// DefineFilterParamsBodyAllOf0EventFormatFederation captures enum value "federation"
	DefineFilterParamsBodyAllOf0EventFormatFederation string = "federation"
)

// prop value enum
func (m *DefineFilterParamsBodyAllOf0) validateEventFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, defineFilterParamsBodyAllOf0TypeEventFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DefineFilterParamsBodyAllOf0) validateEventFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.EventFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventFormatEnum("event_format", "body", m.EventFormat); err != nil {
		return err
	}

	return nil
}

func (m *DefineFilterParamsBodyAllOf0) validatePresence(formats strfmt.Registry) error {

	if swag.IsZero(m.Presence) { // not required
		return nil
	}

	if m.Presence != nil {
		if err := m.Presence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presence")
			}
			return err
		}
	}

	return nil
}

func (m *DefineFilterParamsBodyAllOf0) validateRoom(formats strfmt.Registry) error {

	if swag.IsZero(m.Room) { // not required
		return nil
	}

	if m.Room != nil {
		if err := m.Room.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("room")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefineFilterParamsBodyAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefineFilterParamsBodyAllOf0) UnmarshalBinary(b []byte) error {
	var res DefineFilterParamsBodyAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
