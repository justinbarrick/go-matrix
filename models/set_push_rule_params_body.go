// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetPushRuleParamsBody set push rule params body
// swagger:model setPushRuleParamsBody
type SetPushRuleParamsBody struct {

	// The action(s) to perform when the conditions for this rule are met.
	// Required: true
	Actions []string `json:"actions"`

	// The conditions that must hold true for an event in order for a
	// rule to be applied to an event. A rule with no conditions
	// always matches. Only applicable to ``underride`` and ``override`` rules.
	Conditions []*SetPushRuleParamsBodyConditionsItems `json:"conditions"`

	// Only applicable to ``content`` rules. The glob-style pattern to match against.
	Pattern string `json:"pattern,omitempty"`
}

// Validate validates this set push rule params body
func (m *SetPushRuleParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setPushRuleParamsBodyActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["notify","dont_notify","coalesce","set_tweak"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setPushRuleParamsBodyActionsItemsEnum = append(setPushRuleParamsBodyActionsItemsEnum, v)
	}
}

func (m *SetPushRuleParamsBody) validateActionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, setPushRuleParamsBodyActionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *SetPushRuleParamsBody) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	for i := 0; i < len(m.Actions); i++ {

		// value enum
		if err := m.validateActionsItemsEnum("actions"+"."+strconv.Itoa(i), "body", m.Actions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *SetPushRuleParamsBody) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetPushRuleParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetPushRuleParamsBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
