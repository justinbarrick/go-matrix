// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/models"
)

// SetPushRuleReader is a Reader for the SetPushRule structure.
type SetPushRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPushRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetPushRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSetPushRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSetPushRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetPushRuleOK creates a SetPushRuleOK with default headers values
func NewSetPushRuleOK() *SetPushRuleOK {
	return &SetPushRuleOK{}
}

/*SetPushRuleOK handles this case with default header values.

The pusher was set.
*/
type SetPushRuleOK struct {
	Payload SetPushRuleOKBody
}

func (o *SetPushRuleOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/r0/pushrules/{scope}/{kind}/{ruleId}][%d] setPushRuleOK  %+v", 200, o.Payload)
}

func (o *SetPushRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPushRuleBadRequest creates a SetPushRuleBadRequest with default headers values
func NewSetPushRuleBadRequest() *SetPushRuleBadRequest {
	return &SetPushRuleBadRequest{}
}

/*SetPushRuleBadRequest handles this case with default header values.

There was a problem configuring this push rule.
*/
type SetPushRuleBadRequest struct {
	Payload SetPushRuleBadRequestBody
}

func (o *SetPushRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/r0/pushrules/{scope}/{kind}/{ruleId}][%d] setPushRuleBadRequest  %+v", 400, o.Payload)
}

func (o *SetPushRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPushRuleTooManyRequests creates a SetPushRuleTooManyRequests with default headers values
func NewSetPushRuleTooManyRequests() *SetPushRuleTooManyRequests {
	return &SetPushRuleTooManyRequests{}
}

/*SetPushRuleTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type SetPushRuleTooManyRequests struct {
	Payload *models.SetPushRuleTooManyRequestsBody
}

func (o *SetPushRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/r0/pushrules/{scope}/{kind}/{ruleId}][%d] setPushRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetPushRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SetPushRuleTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetPushRuleBadRequestBody set push rule bad request body
swagger:model SetPushRuleBadRequestBody
*/
type SetPushRuleBadRequestBody interface{}

/*SetPushRuleOKBody set push rule o k body
swagger:model SetPushRuleOKBody
*/
type SetPushRuleOKBody interface{}
