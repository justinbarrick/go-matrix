// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// KickReader is a Reader for the Kick structure.
type KickReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KickReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewKickOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewKickForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewKickOK creates a KickOK with default headers values
func NewKickOK() *KickOK {
	return &KickOK{}
}

/*KickOK handles this case with default header values.

The user has been kicked from the room.
*/
type KickOK struct {
	Payload KickOKBody
}

func (o *KickOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/rooms/{roomId}/kick][%d] kickOK  %+v", 200, o.Payload)
}

func (o *KickOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickForbidden creates a KickForbidden with default headers values
func NewKickForbidden() *KickForbidden {
	return &KickForbidden{}
}

/*KickForbidden handles this case with default header values.

You do not have permission to kick the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

- The kicker is not currently in the room.
- The kickee is not currently in the room.
- The kicker's power level is insufficient to kick users from the room.
*/
type KickForbidden struct {
}

func (o *KickForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/rooms/{roomId}/kick][%d] kickForbidden ", 403)
}

func (o *KickForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*KickOKBody kick o k body
swagger:model KickOKBody
*/
type KickOKBody interface{}
