// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// BanReader is a Reader for the Ban structure.
type BanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewBanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBanOK creates a BanOK with default headers values
func NewBanOK() *BanOK {
	return &BanOK{}
}

/*BanOK handles this case with default header values.

The user has been kicked and banned from the room.
*/
type BanOK struct {
	Payload BanOKBody
}

func (o *BanOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/rooms/{roomId}/ban][%d] banOK  %+v", 200, o.Payload)
}

func (o *BanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBanForbidden creates a BanForbidden with default headers values
func NewBanForbidden() *BanForbidden {
	return &BanForbidden{}
}

/*BanForbidden handles this case with default header values.

You do not have permission to ban the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

- The banner is not currently in the room.
- The banner's power level is insufficient to ban users from the room.
*/
type BanForbidden struct {
}

func (o *BanForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/rooms/{roomId}/ban][%d] banForbidden ", 403)
}

func (o *BanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*BanOKBody ban o k body
swagger:model BanOKBody
*/
type BanOKBody interface{}
