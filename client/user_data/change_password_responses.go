// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChangePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewChangePasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewChangePasswordTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChangePasswordOK creates a ChangePasswordOK with default headers values
func NewChangePasswordOK() *ChangePasswordOK {
	return &ChangePasswordOK{}
}

/*ChangePasswordOK handles this case with default header values.

The password has been changed.
*/
type ChangePasswordOK struct {
	Payload ChangePasswordOKBody
}

func (o *ChangePasswordOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/account/password][%d] changePasswordOK  %+v", 200, o.Payload)
}

func (o *ChangePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordUnauthorized creates a ChangePasswordUnauthorized with default headers values
func NewChangePasswordUnauthorized() *ChangePasswordUnauthorized {
	return &ChangePasswordUnauthorized{}
}

/*ChangePasswordUnauthorized handles this case with default header values.

The homeserver requires additional authentication information.
*/
type ChangePasswordUnauthorized struct {
	Payload *models.ChangePasswordUnauthorizedBody
}

func (o *ChangePasswordUnauthorized) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/account/password][%d] changePasswordUnauthorized  %+v", 401, o.Payload)
}

func (o *ChangePasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChangePasswordUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordTooManyRequests creates a ChangePasswordTooManyRequests with default headers values
func NewChangePasswordTooManyRequests() *ChangePasswordTooManyRequests {
	return &ChangePasswordTooManyRequests{}
}

/*ChangePasswordTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type ChangePasswordTooManyRequests struct {
	Payload *models.ChangePasswordTooManyRequestsBody
}

func (o *ChangePasswordTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/account/password][%d] changePasswordTooManyRequests  %+v", 429, o.Payload)
}

func (o *ChangePasswordTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChangePasswordTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChangePasswordOKBody change password o k body
swagger:model ChangePasswordOKBody
*/
type ChangePasswordOKBody interface{}
