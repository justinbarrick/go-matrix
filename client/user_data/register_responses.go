// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/models"
)

// RegisterReader is a Reader for the Register structure.
type RegisterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRegisterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRegisterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRegisterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewRegisterTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRegisterOK creates a RegisterOK with default headers values
func NewRegisterOK() *RegisterOK {
	return &RegisterOK{}
}

/*RegisterOK handles this case with default header values.

The account has been registered.
*/
type RegisterOK struct {
	Payload *models.RegisterOKBody
}

func (o *RegisterOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/register][%d] registerOK  %+v", 200, o.Payload)
}

func (o *RegisterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegisterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterBadRequest creates a RegisterBadRequest with default headers values
func NewRegisterBadRequest() *RegisterBadRequest {
	return &RegisterBadRequest{}
}

/*RegisterBadRequest handles this case with default header values.

Part of the request was invalid. This may include one of the following error codes:

* ``M_USER_IN_USE`` : The desired user ID is already taken.
* ``M_INVALID_USERNAME`` : The desired user ID is not a valid user name.
* ``M_EXCLUSIVE`` : The desired user ID is in the exclusive namespace
  claimed by an application service.

These errors may be returned at any stage of the registration process,
including after authentication if the requested user ID was registered
whilst the client was performing authentication.

Homeservers MUST perform the relevant checks and return these codes before
performing User-Interactive Authentication, although they may also return
them after authentication is completed if, for example, the requested user ID
was registered whilst the client was performing authentication.
*/
type RegisterBadRequest struct {
}

func (o *RegisterBadRequest) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/register][%d] registerBadRequest ", 400)
}

func (o *RegisterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterUnauthorized creates a RegisterUnauthorized with default headers values
func NewRegisterUnauthorized() *RegisterUnauthorized {
	return &RegisterUnauthorized{}
}

/*RegisterUnauthorized handles this case with default header values.

The homeserver requires additional authentication information.
*/
type RegisterUnauthorized struct {
	Payload *models.RegisterUnauthorizedBody
}

func (o *RegisterUnauthorized) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/register][%d] registerUnauthorized  %+v", 401, o.Payload)
}

func (o *RegisterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegisterUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterTooManyRequests creates a RegisterTooManyRequests with default headers values
func NewRegisterTooManyRequests() *RegisterTooManyRequests {
	return &RegisterTooManyRequests{}
}

/*RegisterTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type RegisterTooManyRequests struct {
	Payload *models.RegisterTooManyRequestsBody
}

func (o *RegisterTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/r0/register][%d] registerTooManyRequests  %+v", 429, o.Payload)
}

func (o *RegisterTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegisterTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
