// Code generated by go-swagger; DO NOT EDIT.

package open_id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/pkg/models"
)

// RequestOpenIDTokenReader is a Reader for the RequestOpenIDToken structure.
type RequestOpenIDTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestOpenIDTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRequestOpenIDTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 429:
		result := NewRequestOpenIDTokenTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRequestOpenIDTokenOK creates a RequestOpenIDTokenOK with default headers values
func NewRequestOpenIDTokenOK() *RequestOpenIDTokenOK {
	return &RequestOpenIDTokenOK{}
}

/*RequestOpenIDTokenOK handles this case with default header values.

OpenID token information. This response is nearly compatible with the
response documented in the `OpenID 1.0 Specification <http://openid.net/specs/openid-connect-core-1_0.html#TokenResponse>`_
with the only difference being the lack of an ``id_token``. Instead,
the Matrix homeserver's name is provided.
*/
type RequestOpenIDTokenOK struct {
	Payload *models.RequestOpenIDTokenOKBody
}

func (o *RequestOpenIDTokenOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/user/{userId}/openid/request_token][%d] requestOpenIdTokenOK  %+v", 200, o.Payload)
}

func (o *RequestOpenIDTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestOpenIDTokenOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestOpenIDTokenTooManyRequests creates a RequestOpenIDTokenTooManyRequests with default headers values
func NewRequestOpenIDTokenTooManyRequests() *RequestOpenIDTokenTooManyRequests {
	return &RequestOpenIDTokenTooManyRequests{}
}

/*RequestOpenIDTokenTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type RequestOpenIDTokenTooManyRequests struct {
	Payload *models.RequestOpenIDTokenTooManyRequestsBody
}

func (o *RequestOpenIDTokenTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/user/{userId}/openid/request_token][%d] requestOpenIdTokenTooManyRequests  %+v", 429, o.Payload)
}

func (o *RequestOpenIDTokenTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RequestOpenIDTokenTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
