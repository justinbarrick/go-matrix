// Code generated by go-swagger; DO NOT EDIT.

package open_id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new open id API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for open id API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RequestOpenIDToken gets an open ID token object to verify the requester s identity

Gets an OpenID token object that the requester may supply to another
service to verify their identity in Matrix. The generated token is only
valid for exchanging for user information from the federation API for
OpenID.

The access token generated is only valid for the OpenID API. It cannot
be used to request another OpenID access token or call ``/sync``, for
example.
*/
func (a *Client) RequestOpenIDToken(params *RequestOpenIDTokenParams, authInfo runtime.ClientAuthInfoWriter) (*RequestOpenIDTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestOpenIDTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestOpenIdToken",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/user/{userId}/openid/request_token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestOpenIDTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestOpenIDTokenOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
