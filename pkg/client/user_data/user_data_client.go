// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangePassword changes a user s password

Changes the password for an account on this homeserver.

This API endpoint uses the `User-Interactive Authentication API`_.

An access token should be submitted to this endpoint if the client has
an active session.

The homeserver may change the flows available depending on whether a
valid access token is provided.
*/
func (a *Client) ChangePassword(params *ChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changePassword",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/account/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangePasswordOK), nil

}

/*
CheckUsernameAvailability checks to see if a username is available on the server

Checks to see if a username is available, and valid, for the server.

The server should check to ensure that, at the time of the request, the
username requested is available for use. This includes verifying that an
application service has not claimed the username and that the username
fits the server's desired requirements (for example, a server could dictate
that it does not permit usernames with underscores).

Matrix clients may wish to use this API prior to attempting registration,
however the clients must also be aware that using this API does not normally
reserve the username. This can mean that the username becomes unavailable
between checking its availability and attempting to register it.
*/
func (a *Client) CheckUsernameAvailability(params *CheckUsernameAvailabilityParams) (*CheckUsernameAvailabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckUsernameAvailabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkUsernameAvailability",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/register/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckUsernameAvailabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckUsernameAvailabilityOK), nil

}

/*
DeactivateAccount deactivates a user s account

Deactivate the user's account, removing all ability for the user to
login again.

This API endpoint uses the `User-Interactive Authentication API`_.

An access token should be submitted to this endpoint if the client has
an active session.

The homeserver may change the flows available depending on whether a
valid access token is provided.
*/
func (a *Client) DeactivateAccount(params *DeactivateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DeactivateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeactivateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deactivateAccount",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/account/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeactivateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeactivateAccountOK), nil

}

/*
Delete3pidFromAccount deletes a third party identifier from the user s account

Removes a third party identifier from the user's account. This might not
cause an unbind of the identifier from the identity server.
*/
func (a *Client) Delete3pidFromAccount(params *Delete3pidFromAccountParams, authInfo runtime.ClientAuthInfoWriter) (*Delete3pidFromAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelete3pidFromAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete3pidFromAccount",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/account/3pid/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Delete3pidFromAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Delete3pidFromAccountOK), nil

}

/*
DeleteRoomTag removes a tag from the room

Remove a tag from the room.
*/
func (a *Client) DeleteRoomTag(params *DeleteRoomTagParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoomTag",
		Method:             "DELETE",
		PathPattern:        "/_matrix/client/unstable/user/{userId}/rooms/{roomId}/tags/{tag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoomTagOK), nil

}

/*
GetAccount3PIds gets a list of a user s third party identifiers

Gets a list of the third party identifiers that the homeserver has
associated with the user's account.

This is *not* the same as the list of third party identifiers bound to
the user's Matrix ID in identity servers.

Identifiers in this list may be used by the homeserver as, for example,
identifiers that it will accept to reset the user's account password.
*/
func (a *Client) GetAccount3PIds(params *GetAccount3PIdsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccount3PIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccount3PIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccount3PIDs",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/account/3pid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccount3PIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccount3PIdsOK), nil

}

/*
GetAvatarURL gets the user s avatar URL

Get the user's avatar URL. This API may be used to fetch the user's
own avatar URL or to query the URL of other users; either locally or
on remote homeservers.
*/
func (a *Client) GetAvatarURL(params *GetAvatarURLParams) (*GetAvatarURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvatarURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAvatarUrl",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/profile/{userId}/avatar_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAvatarURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAvatarURLOK), nil

}

/*
GetDisplayName gets the user s display name

Get the user's display name. This API may be used to fetch the user's
own displayname or to query the name of other users; either locally or
on remote homeservers.
*/
func (a *Client) GetDisplayName(params *GetDisplayNameParams) (*GetDisplayNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisplayNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDisplayName",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/profile/{userId}/displayname",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDisplayNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDisplayNameOK), nil

}

/*
GetRoomTags lists the tags for a room

List the tags set by a user on a room.
*/
func (a *Client) GetRoomTags(params *GetRoomTagsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoomTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoomTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoomTags",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/user/{userId}/rooms/{roomId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoomTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoomTagsOK), nil

}

/*
GetTokenOwner gets information about the owner of an access token

Gets information about the owner of a given access token.

Note that, as with the rest of the Client-Server API,
Application Services may masquerade as users within their
namespace by giving a ``user_id`` query parameter. In this
situation, the server should verify that the given ``user_id``
is registered by the appservice, and return it in the response
body.
*/
func (a *Client) GetTokenOwner(params *GetTokenOwnerParams, authInfo runtime.ClientAuthInfoWriter) (*GetTokenOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenOwnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTokenOwner",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/account/whoami",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTokenOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTokenOwnerOK), nil

}

/*
GetUserProfile gets this user s profile information

Get the combined profile information for this user. This API may be used
to fetch the user's own profile information or other users; either
locally or on remote homeservers. This API may return keys which are not
limited to ``displayname`` or ``avatar_url``.
*/
func (a *Client) GetUserProfile(params *GetUserProfileParams) (*GetUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserProfile",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/profile/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserProfileOK), nil

}

/*
Post3PIds adds contact information to the user s account

Adds contact information to the user's account.
*/
func (a *Client) Post3PIds(params *Post3PIdsParams, authInfo runtime.ClientAuthInfoWriter) (*Post3PIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPost3PIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post3PIDs",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/account/3pid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Post3PIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*Post3PIdsOK), nil

}

/*
Register registers for an account on this homeserver

This API endpoint uses the `User-Interactive Authentication API`_.

Register for an account on this homeserver.

There are two kinds of user account:

- `user` accounts. These accounts may use the full API described in this specification.

- `guest` accounts. These accounts may have limited permissions and may not be supported by all servers.

If registration is successful, this endpoint will issue an access token
the client can use to authorize itself in subsequent requests.

If the client does not supply a ``device_id``, the server must
auto-generate one.

The server SHOULD register an account with a User ID based on the
``username`` provided, if any. Note that the grammar of Matrix User ID
localparts is restricted, so the server MUST either map the provided
``username`` onto a ``user_id`` in a logical manner, or reject
``username``\s which do not comply to the grammar, with
``M_INVALID_USERNAME``.

Matrix clients MUST NOT assume that localpart of the registered
``user_id`` matches the provided ``username``.

The returned access token must be associated with the ``device_id``
supplied by the client or generated by the server. The server may
invalidate any access token previously associated with that device. See
`Relationship between access tokens and devices`_.
*/
func (a *Client) Register(params *RegisterParams) (*RegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "register",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterOK), nil

}

/*
SearchUserDirectory searches the user directory

Performs a search for users on the homeserver. The homeserver may
determine which subset of users are searched, however the homeserver
MUST at a minimum consider the users the requesting user shares a
room with and those who reside in public rooms (known to the homeserver).
The search MUST consider local users to the homeserver, and SHOULD
query remote users as part of the search.

The search is performed case-insensitively on user IDs and display
names preferably using a collation determined based upon the
``Accept-Language`` header provided in the request, if present.
*/
func (a *Client) SearchUserDirectory(params *SearchUserDirectoryParams, authInfo runtime.ClientAuthInfoWriter) (*SearchUserDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserDirectoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchUserDirectory",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/user_directory/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUserDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchUserDirectoryOK), nil

}

/*
SetAccountData sets some account data for the user

Set some account_data for the client. This config is only visible to the user
that set the account_data. The config will be synced to clients in the
top-level ``account_data``.
*/
func (a *Client) SetAccountData(params *SetAccountDataParams, authInfo runtime.ClientAuthInfoWriter) (*SetAccountDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccountDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAccountData",
		Method:             "PUT",
		PathPattern:        "/_matrix/client/unstable/user/{userId}/account_data/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccountDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAccountDataOK), nil

}

/*
SetAccountDataPerRoom sets some account data for the user

Set some account_data for the client on a given room. This config is only
visible to the user that set the account_data. The config will be synced to
clients in the per-room ``account_data``.
*/
func (a *Client) SetAccountDataPerRoom(params *SetAccountDataPerRoomParams, authInfo runtime.ClientAuthInfoWriter) (*SetAccountDataPerRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccountDataPerRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAccountDataPerRoom",
		Method:             "PUT",
		PathPattern:        "/_matrix/client/unstable/user/{userId}/rooms/{roomId}/account_data/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccountDataPerRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAccountDataPerRoomOK), nil

}

/*
SetAvatarURL sets the user s avatar URL

This API sets the given user's avatar URL. You must have permission to
set this user's avatar URL, e.g. you need to have their ``access_token``.
*/
func (a *Client) SetAvatarURL(params *SetAvatarURLParams, authInfo runtime.ClientAuthInfoWriter) (*SetAvatarURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAvatarURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAvatarUrl",
		Method:             "PUT",
		PathPattern:        "/_matrix/client/unstable/profile/{userId}/avatar_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAvatarURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAvatarURLOK), nil

}

/*
SetDisplayName sets the user s display name

This API sets the given user's display name. You must have permission to
set this user's display name, e.g. you need to have their ``access_token``.
*/
func (a *Client) SetDisplayName(params *SetDisplayNameParams, authInfo runtime.ClientAuthInfoWriter) (*SetDisplayNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDisplayNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setDisplayName",
		Method:             "PUT",
		PathPattern:        "/_matrix/client/unstable/profile/{userId}/displayname",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDisplayNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetDisplayNameOK), nil

}

/*
SetRoomTag adds a tag to a room

Add a tag to the room.
*/
func (a *Client) SetRoomTag(params *SetRoomTagParams, authInfo runtime.ClientAuthInfoWriter) (*SetRoomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRoomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setRoomTag",
		Method:             "PUT",
		PathPattern:        "/_matrix/client/unstable/user/{userId}/rooms/{roomId}/tags/{tag}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRoomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRoomTagOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
