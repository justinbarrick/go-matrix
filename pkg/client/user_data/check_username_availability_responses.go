// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/pkg/models"
)

// CheckUsernameAvailabilityReader is a Reader for the CheckUsernameAvailability structure.
type CheckUsernameAvailabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckUsernameAvailabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCheckUsernameAvailabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCheckUsernameAvailabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewCheckUsernameAvailabilityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCheckUsernameAvailabilityOK creates a CheckUsernameAvailabilityOK with default headers values
func NewCheckUsernameAvailabilityOK() *CheckUsernameAvailabilityOK {
	return &CheckUsernameAvailabilityOK{}
}

/*CheckUsernameAvailabilityOK handles this case with default header values.

The username is available
*/
type CheckUsernameAvailabilityOK struct {
	Payload *models.CheckUsernameAvailabilityOKBody
}

func (o *CheckUsernameAvailabilityOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/register/available][%d] checkUsernameAvailabilityOK  %+v", 200, o.Payload)
}

func (o *CheckUsernameAvailabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CheckUsernameAvailabilityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckUsernameAvailabilityBadRequest creates a CheckUsernameAvailabilityBadRequest with default headers values
func NewCheckUsernameAvailabilityBadRequest() *CheckUsernameAvailabilityBadRequest {
	return &CheckUsernameAvailabilityBadRequest{}
}

/*CheckUsernameAvailabilityBadRequest handles this case with default header values.

Part of the request was invalid or the username is not available. This may
include one of the following error codes:

* ``M_USER_IN_USE`` : The desired username is already taken.
* ``M_INVALID_USERNAME`` : The desired username is not a valid user name.
* ``M_EXCLUSIVE`` : The desired username is in the exclusive namespace
  claimed by an application service.
*/
type CheckUsernameAvailabilityBadRequest struct {
	Payload *models.CheckUsernameAvailabilityBadRequestBody
}

func (o *CheckUsernameAvailabilityBadRequest) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/register/available][%d] checkUsernameAvailabilityBadRequest  %+v", 400, o.Payload)
}

func (o *CheckUsernameAvailabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CheckUsernameAvailabilityBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckUsernameAvailabilityTooManyRequests creates a CheckUsernameAvailabilityTooManyRequests with default headers values
func NewCheckUsernameAvailabilityTooManyRequests() *CheckUsernameAvailabilityTooManyRequests {
	return &CheckUsernameAvailabilityTooManyRequests{}
}

/*CheckUsernameAvailabilityTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type CheckUsernameAvailabilityTooManyRequests struct {
	Payload *models.CheckUsernameAvailabilityTooManyRequestsBody
}

func (o *CheckUsernameAvailabilityTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/register/available][%d] checkUsernameAvailabilityTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckUsernameAvailabilityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CheckUsernameAvailabilityTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
