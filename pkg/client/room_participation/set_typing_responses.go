// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/pkg/models"
)

// SetTypingReader is a Reader for the SetTyping structure.
type SetTypingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetTypingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSetTypingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 429:
		result := NewSetTypingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetTypingOK creates a SetTypingOK with default headers values
func NewSetTypingOK() *SetTypingOK {
	return &SetTypingOK{}
}

/*SetTypingOK handles this case with default header values.

The new typing state was set.
*/
type SetTypingOK struct {
	Payload SetTypingOKBody
}

func (o *SetTypingOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/rooms/{roomId}/typing/{userId}][%d] setTypingOK  %+v", 200, o.Payload)
}

func (o *SetTypingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTypingTooManyRequests creates a SetTypingTooManyRequests with default headers values
func NewSetTypingTooManyRequests() *SetTypingTooManyRequests {
	return &SetTypingTooManyRequests{}
}

/*SetTypingTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type SetTypingTooManyRequests struct {
	Payload *models.SetTypingTooManyRequestsBody
}

func (o *SetTypingTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/rooms/{roomId}/typing/{userId}][%d] setTypingTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetTypingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SetTypingTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetTypingOKBody set typing o k body
swagger:model SetTypingOKBody
*/
type SetTypingOKBody interface{}
