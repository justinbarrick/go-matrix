// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/pkg/models"
)

// GetContentOverrideNameReader is a Reader for the GetContentOverrideName structure.
type GetContentOverrideNameReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetContentOverrideNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetContentOverrideNameOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 429:
		result := NewGetContentOverrideNameTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetContentOverrideNameOK creates a GetContentOverrideNameOK with default headers values
func NewGetContentOverrideNameOK(writer io.Writer) *GetContentOverrideNameOK {
	return &GetContentOverrideNameOK{
		Payload: writer,
	}
}

/*GetContentOverrideNameOK handles this case with default header values.

The content that was previously uploaded.
*/
type GetContentOverrideNameOK struct {
	/*The name of file given in the request
	 */
	ContentDisposition string
	/*The content type of the file that was previously uploaded.
	 */
	ContentType string

	Payload io.Writer
}

func (o *GetContentOverrideNameOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/media/unstable/download/{serverName}/{mediaId}/{fileName}][%d] getContentOverrideNameOK  %+v", 200, o.Payload)
}

func (o *GetContentOverrideNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Disposition
	o.ContentDisposition = response.GetHeader("Content-Disposition")

	// response header Content-Type
	o.ContentType = response.GetHeader("Content-Type")

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentOverrideNameTooManyRequests creates a GetContentOverrideNameTooManyRequests with default headers values
func NewGetContentOverrideNameTooManyRequests() *GetContentOverrideNameTooManyRequests {
	return &GetContentOverrideNameTooManyRequests{}
}

/*GetContentOverrideNameTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type GetContentOverrideNameTooManyRequests struct {
	Payload *models.GetContentOverrideNameTooManyRequestsBody
}

func (o *GetContentOverrideNameTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /_matrix/media/unstable/download/{serverName}/{mediaId}/{fileName}][%d] getContentOverrideNameTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentOverrideNameTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetContentOverrideNameTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
