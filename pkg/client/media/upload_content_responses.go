// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/justinbarrick/go-matrix/pkg/models"
)

// UploadContentReader is a Reader for the UploadContent structure.
type UploadContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUploadContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 429:
		result := NewUploadContentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadContentOK creates a UploadContentOK with default headers values
func NewUploadContentOK() *UploadContentOK {
	return &UploadContentOK{}
}

/*UploadContentOK handles this case with default header values.

The MXC URI for the uploaded content.
*/
type UploadContentOK struct {
	Payload *models.UploadContentOKBody
}

func (o *UploadContentOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/media/unstable/upload][%d] uploadContentOK  %+v", 200, o.Payload)
}

func (o *UploadContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UploadContentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadContentTooManyRequests creates a UploadContentTooManyRequests with default headers values
func NewUploadContentTooManyRequests() *UploadContentTooManyRequests {
	return &UploadContentTooManyRequests{}
}

/*UploadContentTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type UploadContentTooManyRequests struct {
	Payload *models.UploadContentTooManyRequestsBody
}

func (o *UploadContentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/media/unstable/upload][%d] uploadContentTooManyRequests  %+v", 429, o.Payload)
}

func (o *UploadContentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UploadContentTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
