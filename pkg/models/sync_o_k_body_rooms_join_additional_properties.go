// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SyncOKBodyRoomsJoinAdditionalProperties Joined Room
// swagger:model syncOKBodyRoomsJoinAdditionalProperties
type SyncOKBodyRoomsJoinAdditionalProperties struct {

	// account data
	AccountData *SyncOKBodyRoomsJoinAdditionalPropertiesAccountData `json:"account_data,omitempty"`

	// ephemeral
	Ephemeral *SyncOKBodyRoomsJoinAdditionalPropertiesEphemeral `json:"ephemeral,omitempty"`

	// state
	State *SyncOKBodyRoomsJoinAdditionalPropertiesState `json:"state,omitempty"`

	// timeline
	Timeline *SyncOKBodyRoomsJoinAdditionalPropertiesTimeline `json:"timeline,omitempty"`

	// unread notifications
	UnreadNotifications *SyncOKBodyRoomsJoinAdditionalPropertiesUnreadNotifications `json:"unread_notifications,omitempty"`
}

// Validate validates this sync o k body rooms join additional properties
func (m *SyncOKBodyRoomsJoinAdditionalProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEphemeral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnreadNotifications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncOKBodyRoomsJoinAdditionalProperties) validateAccountData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountData) { // not required
		return nil
	}

	if m.AccountData != nil {
		if err := m.AccountData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_data")
			}
			return err
		}
	}

	return nil
}

func (m *SyncOKBodyRoomsJoinAdditionalProperties) validateEphemeral(formats strfmt.Registry) error {

	if swag.IsZero(m.Ephemeral) { // not required
		return nil
	}

	if m.Ephemeral != nil {
		if err := m.Ephemeral.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ephemeral")
			}
			return err
		}
	}

	return nil
}

func (m *SyncOKBodyRoomsJoinAdditionalProperties) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *SyncOKBodyRoomsJoinAdditionalProperties) validateTimeline(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeline) { // not required
		return nil
	}

	if m.Timeline != nil {
		if err := m.Timeline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeline")
			}
			return err
		}
	}

	return nil
}

func (m *SyncOKBodyRoomsJoinAdditionalProperties) validateUnreadNotifications(formats strfmt.Registry) error {

	if swag.IsZero(m.UnreadNotifications) { // not required
		return nil
	}

	if m.UnreadNotifications != nil {
		if err := m.UnreadNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unread_notifications")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncOKBodyRoomsJoinAdditionalProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncOKBodyRoomsJoinAdditionalProperties) UnmarshalBinary(b []byte) error {
	var res SyncOKBodyRoomsJoinAdditionalProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
