// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitialSyncOKBody initial sync o k body
// swagger:model initialSyncOKBody
type InitialSyncOKBody struct {

	// The global private data created by this user.
	AccountData []*InitialSyncOKBodyAccountDataItems `json:"account_data"`

	// A token which correlates to the last value in ``chunk``. This
	// token should be used with the ``/events`` API to listen for new
	// events.
	// Required: true
	End *string `json:"end"`

	// A list of presence events.
	// Required: true
	Presence []*InitialSyncOKBodyPresenceItems `json:"presence"`

	// rooms
	// Required: true
	Rooms []*InitialSyncOKBodyRoomsItems `json:"rooms"`
}

// Validate validates this initial sync o k body
func (m *InitialSyncOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRooms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitialSyncOKBody) validateAccountData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountData) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountData); i++ {
		if swag.IsZero(m.AccountData[i]) { // not required
			continue
		}

		if m.AccountData[i] != nil {
			if err := m.AccountData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InitialSyncOKBody) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	return nil
}

func (m *InitialSyncOKBody) validatePresence(formats strfmt.Registry) error {

	if err := validate.Required("presence", "body", m.Presence); err != nil {
		return err
	}

	for i := 0; i < len(m.Presence); i++ {
		if swag.IsZero(m.Presence[i]) { // not required
			continue
		}

		if m.Presence[i] != nil {
			if err := m.Presence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("presence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InitialSyncOKBody) validateRooms(formats strfmt.Registry) error {

	if err := validate.Required("rooms", "body", m.Rooms); err != nil {
		return err
	}

	for i := 0; i < len(m.Rooms); i++ {
		if swag.IsZero(m.Rooms[i]) { // not required
			continue
		}

		if m.Rooms[i] != nil {
			if err := m.Rooms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rooms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitialSyncOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitialSyncOKBody) UnmarshalBinary(b []byte) error {
	var res InitialSyncOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
