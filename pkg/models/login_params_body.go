// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoginParamsBody login params body
// swagger:model loginParamsBody
type LoginParamsBody struct {

	// Third party identifier for the user.  Deprecated in favour of ``identifier``.
	Address string `json:"address,omitempty"`

	// ID of the client device. If this does not correspond to a
	// known client device, a new device will be created. The server
	// will auto-generate a device_id if this is not specified.
	DeviceID string `json:"device_id,omitempty"`

	// identifier
	Identifier *LoginParamsBodyIdentifier `json:"identifier,omitempty"`

	// A display name to assign to the newly-created device. Ignored
	// if ``device_id`` corresponds to a known device.
	InitialDeviceDisplayName string `json:"initial_device_display_name,omitempty"`

	// When logging in using a third party identifier, the medium of the identifier. Must be 'email'.  Deprecated in favour of ``identifier``.
	Medium string `json:"medium,omitempty"`

	// Required when ``type`` is ``m.login.password``. The user's
	// password.
	Password string `json:"password,omitempty"`

	// Required when ``type`` is ``m.login.token``. Part of `Token-based`_ login.
	Token string `json:"token,omitempty"`

	// The login type being used.
	// Required: true
	// Enum: [m.login.password m.login.token]
	Type *string `json:"type"`

	// The fully qualified user ID or just local part of the user ID, to log in.  Deprecated in favour of ``identifier``.
	User string `json:"user,omitempty"`
}

// Validate validates this login params body
func (m *LoginParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoginParamsBody) validateIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if m.Identifier != nil {
		if err := m.Identifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

var loginParamsBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["m.login.password","m.login.token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginParamsBodyTypeTypePropEnum = append(loginParamsBodyTypeTypePropEnum, v)
	}
}

const (

	// LoginParamsBodyTypeMLoginPassword captures enum value "m.login.password"
	LoginParamsBodyTypeMLoginPassword string = "m.login.password"

	// LoginParamsBodyTypeMLoginToken captures enum value "m.login.token"
	LoginParamsBodyTypeMLoginToken string = "m.login.token"
)

// prop value enum
func (m *LoginParamsBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loginParamsBodyTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LoginParamsBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoginParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoginParamsBody) UnmarshalBinary(b []byte) error {
	var res LoginParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
