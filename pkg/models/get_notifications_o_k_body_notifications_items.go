// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNotificationsOKBodyNotificationsItems Notification
// swagger:model getNotificationsOKBodyNotificationsItems
type GetNotificationsOKBodyNotificationsItems struct {

	// The action(s) to perform when the conditions for this rule are met.
	// See `Push Rules: API`_.
	// Required: true
	Actions []interface{} `json:"actions"`

	// event
	// Required: true
	Event *GetNotificationsOKBodyNotificationsItemsEvent `json:"event"`

	// The profile tag of the rule that matched this event.
	ProfileTag string `json:"profile_tag,omitempty"`

	// Indicates whether the user has sent a read receipt indicating
	// that they have read this message.
	// Required: true
	Read *bool `json:"read"`

	// The ID of the room in which the event was posted.
	// Required: true
	RoomID *string `json:"room_id"`

	// The unix timestamp at which the event notification was sent,
	// in milliseconds.
	// Required: true
	Ts *int64 `json:"ts"`
}

// Validate validates this get notifications o k body notifications items
func (m *GetNotificationsOKBodyNotificationsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNotificationsOKBodyNotificationsItems) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	return nil
}

func (m *GetNotificationsOKBodyNotificationsItems) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *GetNotificationsOKBodyNotificationsItems) validateRead(formats strfmt.Registry) error {

	if err := validate.Required("read", "body", m.Read); err != nil {
		return err
	}

	return nil
}

func (m *GetNotificationsOKBodyNotificationsItems) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", m.RoomID); err != nil {
		return err
	}

	return nil
}

func (m *GetNotificationsOKBodyNotificationsItems) validateTs(formats strfmt.Registry) error {

	if err := validate.Required("ts", "body", m.Ts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetNotificationsOKBodyNotificationsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNotificationsOKBodyNotificationsItems) UnmarshalBinary(b []byte) error {
	var res GetNotificationsOKBodyNotificationsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
