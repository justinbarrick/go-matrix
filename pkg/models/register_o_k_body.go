// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterOKBody register o k body
// swagger:model registerOKBody
type RegisterOKBody struct {

	// An access token for the account.
	// This access token can then be used to authorize other requests.
	// Required if the ``inhibit_login`` option is false.
	AccessToken string `json:"access_token,omitempty"`

	// ID of the registered device. Will be the same as the
	// corresponding parameter in the request, if one was specified.
	// Required if the ``inhibit_login`` option is false.
	DeviceID string `json:"device_id,omitempty"`

	// The server_name of the homeserver on which the account has
	// been registered.
	//
	// **Deprecated**. Clients should extract the server_name from
	// ``user_id`` (by splitting at the first colon) if they require
	// it. Note also that ``homeserver`` is not spelt this way.
	HomeServer string `json:"home_server,omitempty"`

	// The fully-qualified Matrix user ID (MXID) that has been registered.
	//
	// Any user ID returned by this API must conform to the grammar given in the
	// `Matrix specification <https://matrix.org/docs/spec/appendices.html#user-identifiers>`_.
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this register o k body
func (m *RegisterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterOKBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
