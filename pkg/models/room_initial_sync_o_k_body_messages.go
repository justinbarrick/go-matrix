// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoomInitialSyncOKBodyMessages PaginationChunk
//
// The pagination chunk for this room.
// swagger:model roomInitialSyncOKBodyMessages
type RoomInitialSyncOKBodyMessages struct {

	// If the user is a member of the room this will be a
	// list of the most recent messages for this room. If
	// the user has left the room this will be the
	// messages that preceeded them leaving. This array
	// will consist of at most ``limit`` elements.
	// Required: true
	Chunk []*RoomInitialSyncOKBodyMessagesChunkItems `json:"chunk"`

	// A token which correlates to the last value in ``chunk``.
	// Used for pagination.
	// Required: true
	End *string `json:"end"`

	// A token which correlates to the first value in ``chunk``.
	// Used for pagination.
	// Required: true
	Start *string `json:"start"`
}

// Validate validates this room initial sync o k body messages
func (m *RoomInitialSyncOKBodyMessages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoomInitialSyncOKBodyMessages) validateChunk(formats strfmt.Registry) error {

	if err := validate.Required("chunk", "body", m.Chunk); err != nil {
		return err
	}

	for i := 0; i < len(m.Chunk); i++ {
		if swag.IsZero(m.Chunk[i]) { // not required
			continue
		}

		if m.Chunk[i] != nil {
			if err := m.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoomInitialSyncOKBodyMessages) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	return nil
}

func (m *RoomInitialSyncOKBodyMessages) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoomInitialSyncOKBodyMessages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoomInitialSyncOKBodyMessages) UnmarshalBinary(b []byte) error {
	var res RoomInitialSyncOKBodyMessages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
