// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitialSyncOKBodyRoomsItems RoomInfo
// swagger:model initialSyncOKBodyRoomsItems
type InitialSyncOKBodyRoomsItems struct {

	// The private data that this user has attached to
	// this room.
	AccountData []*InitialSyncOKBodyRoomsItemsAccountDataItems `json:"account_data"`

	// invite
	Invite *InitialSyncOKBodyRoomsItemsInvite `json:"invite,omitempty"`

	// The user's membership state in this room.
	// Required: true
	// Enum: [invite join leave ban]
	Membership *string `json:"membership"`

	// messages
	Messages *InitialSyncOKBodyRoomsItemsMessages `json:"messages,omitempty"`

	// The ID of this room.
	// Required: true
	RoomID *string `json:"room_id"`

	// If the user is a member of the room this will be the
	// current state of the room as a list of events. If the
	// user has left the room this will be the state of the
	// room when they left it.
	State []*InitialSyncOKBodyRoomsItemsStateItems `json:"state"`

	// Whether this room is visible to the ``/publicRooms`` API
	// or not."
	// Enum: [private public]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this initial sync o k body rooms items
func (m *InitialSyncOKBodyRoomsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembership(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateAccountData(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountData) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountData); i++ {
		if swag.IsZero(m.AccountData[i]) { // not required
			continue
		}

		if m.AccountData[i] != nil {
			if err := m.AccountData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateInvite(formats strfmt.Registry) error {

	if swag.IsZero(m.Invite) { // not required
		return nil
	}

	if m.Invite != nil {
		if err := m.Invite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invite")
			}
			return err
		}
	}

	return nil
}

var initialSyncOKBodyRoomsItemsTypeMembershipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invite","join","leave","ban"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		initialSyncOKBodyRoomsItemsTypeMembershipPropEnum = append(initialSyncOKBodyRoomsItemsTypeMembershipPropEnum, v)
	}
}

const (

	// InitialSyncOKBodyRoomsItemsMembershipInvite captures enum value "invite"
	InitialSyncOKBodyRoomsItemsMembershipInvite string = "invite"

	// InitialSyncOKBodyRoomsItemsMembershipJoin captures enum value "join"
	InitialSyncOKBodyRoomsItemsMembershipJoin string = "join"

	// InitialSyncOKBodyRoomsItemsMembershipLeave captures enum value "leave"
	InitialSyncOKBodyRoomsItemsMembershipLeave string = "leave"

	// InitialSyncOKBodyRoomsItemsMembershipBan captures enum value "ban"
	InitialSyncOKBodyRoomsItemsMembershipBan string = "ban"
)

// prop value enum
func (m *InitialSyncOKBodyRoomsItems) validateMembershipEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, initialSyncOKBodyRoomsItemsTypeMembershipPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateMembership(formats strfmt.Registry) error {

	if err := validate.Required("membership", "body", m.Membership); err != nil {
		return err
	}

	// value enum
	if err := m.validateMembershipEnum("membership", "body", *m.Membership); err != nil {
		return err
	}

	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	if m.Messages != nil {
		if err := m.Messages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messages")
			}
			return err
		}
	}

	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", m.RoomID); err != nil {
		return err
	}

	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	for i := 0; i < len(m.State); i++ {
		if swag.IsZero(m.State[i]) { // not required
			continue
		}

		if m.State[i] != nil {
			if err := m.State[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var initialSyncOKBodyRoomsItemsTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		initialSyncOKBodyRoomsItemsTypeVisibilityPropEnum = append(initialSyncOKBodyRoomsItemsTypeVisibilityPropEnum, v)
	}
}

const (

	// InitialSyncOKBodyRoomsItemsVisibilityPrivate captures enum value "private"
	InitialSyncOKBodyRoomsItemsVisibilityPrivate string = "private"

	// InitialSyncOKBodyRoomsItemsVisibilityPublic captures enum value "public"
	InitialSyncOKBodyRoomsItemsVisibilityPublic string = "public"
)

// prop value enum
func (m *InitialSyncOKBodyRoomsItems) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, initialSyncOKBodyRoomsItemsTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InitialSyncOKBodyRoomsItems) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitialSyncOKBodyRoomsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitialSyncOKBodyRoomsItems) UnmarshalBinary(b []byte) error {
	var res InitialSyncOKBodyRoomsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
