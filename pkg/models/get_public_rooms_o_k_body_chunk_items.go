// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPublicRoomsOKBodyChunkItems PublicRoomsChunk
// swagger:model getPublicRoomsOKBodyChunkItems
type GetPublicRoomsOKBodyChunkItems struct {

	// Aliases of the room. May be empty.
	Aliases []string `json:"aliases"`

	// The URL for the room's avatar, if one is set.
	AvatarURL string `json:"avatar_url,omitempty"`

	// The canonical alias of the room, if any.
	CanonicalAlias string `json:"canonical_alias,omitempty"`

	// Whether guest users may join the room and participate in it.
	// If they can, they will be subject to ordinary power level
	// rules like any other user.
	// Required: true
	GuestCanJoin *bool `json:"guest_can_join"`

	// The name of the room, if any.
	Name string `json:"name,omitempty"`

	// The number of members joined to the room.
	// Required: true
	NumJoinedMembers *int64 `json:"num_joined_members"`

	// The ID of the room.
	// Required: true
	RoomID *string `json:"room_id"`

	// The topic of the room, if any.
	Topic string `json:"topic,omitempty"`

	// Whether the room may be viewed by guest users without joining.
	// Required: true
	WorldReadable *bool `json:"world_readable"`
}

// Validate validates this get public rooms o k body chunk items
func (m *GetPublicRoomsOKBodyChunkItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGuestCanJoin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumJoinedMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorldReadable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPublicRoomsOKBodyChunkItems) validateGuestCanJoin(formats strfmt.Registry) error {

	if err := validate.Required("guest_can_join", "body", m.GuestCanJoin); err != nil {
		return err
	}

	return nil
}

func (m *GetPublicRoomsOKBodyChunkItems) validateNumJoinedMembers(formats strfmt.Registry) error {

	if err := validate.Required("num_joined_members", "body", m.NumJoinedMembers); err != nil {
		return err
	}

	return nil
}

func (m *GetPublicRoomsOKBodyChunkItems) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", m.RoomID); err != nil {
		return err
	}

	return nil
}

func (m *GetPublicRoomsOKBodyChunkItems) validateWorldReadable(formats strfmt.Registry) error {

	if err := validate.Required("world_readable", "body", m.WorldReadable); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPublicRoomsOKBodyChunkItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPublicRoomsOKBodyChunkItems) UnmarshalBinary(b []byte) error {
	var res GetPublicRoomsOKBodyChunkItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
