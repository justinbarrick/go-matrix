// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetPushRuleActionsParamsBody set push rule actions params body
// swagger:model setPushRuleActionsParamsBody
type SetPushRuleActionsParamsBody struct {

	// The action(s) to perform for this rule.
	// Required: true
	Actions []string `json:"actions"`
}

// Validate validates this set push rule actions params body
func (m *SetPushRuleActionsParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setPushRuleActionsParamsBodyActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["notify","dont_notify","coalesce","set_tweak"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setPushRuleActionsParamsBodyActionsItemsEnum = append(setPushRuleActionsParamsBodyActionsItemsEnum, v)
	}
}

func (m *SetPushRuleActionsParamsBody) validateActionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, setPushRuleActionsParamsBodyActionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *SetPushRuleActionsParamsBody) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	for i := 0; i < len(m.Actions); i++ {

		// value enum
		if err := m.validateActionsItemsEnum("actions"+"."+strconv.Itoa(i), "body", m.Actions[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetPushRuleActionsParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetPushRuleActionsParamsBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleActionsParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
