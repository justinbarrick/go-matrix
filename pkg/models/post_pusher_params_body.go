// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostPusherParamsBody post pusher params body
// swagger:model postPusherParamsBody
type PostPusherParamsBody struct {

	// A string that will allow the user to identify what application
	// owns this pusher.
	// Required: true
	AppDisplayName *string `json:"app_display_name"`

	// This is a reverse-DNS style identifier for the application.
	// It is recommended that this end with the platform, such that
	// different platform versions get different app identifiers.
	// Max length, 64 chars.
	//
	// If the ``kind`` is ``"email"``, this is ``"m.email"``.
	// Required: true
	AppID *string `json:"app_id"`

	// If true, the homeserver should add another pusher with the
	// given pushkey and App ID in addition to any others with
	// different user IDs. Otherwise, the homeserver must remove any
	// other pushers with the same App ID and pushkey for different
	// users. The default is ``false``.
	Append bool `json:"append,omitempty"`

	// data
	// Required: true
	Data *PostPusherParamsBodyData `json:"data"`

	// A string that will allow the user to identify what device owns
	// this pusher.
	// Required: true
	DeviceDisplayName *string `json:"device_display_name"`

	// The kind of pusher to configure. ``"http"`` makes a pusher that
	// sends HTTP pokes. ``"email"`` makes a pusher that emails the
	// user with unread notifications. ``null`` deletes the pusher.
	// Required: true
	Kind *string `json:"kind"`

	// The preferred language for receiving notifications (e.g. 'en'
	// or 'en-US').
	// Required: true
	Lang *string `json:"lang"`

	// This string determines which set of device specific rules this
	// pusher executes.
	ProfileTag string `json:"profile_tag,omitempty"`

	// This is a unique identifier for this pusher. The value you
	// should use for this is the routing or destination address
	// information for the notification, for example, the APNS token
	// for APNS or the Registration ID for GCM. If your notification
	// client has no such concept, use any unique identifier.
	// Max length, 512 bytes.
	//
	// If the ``kind`` is ``"email"``, this is the email address to
	// send notifications to.
	// Required: true
	Pushkey *string `json:"pushkey"`
}

// Validate validates this post pusher params body
func (m *PostPusherParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLang(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushkey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostPusherParamsBody) validateAppDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("app_display_name", "body", m.AppDisplayName); err != nil {
		return err
	}

	return nil
}

func (m *PostPusherParamsBody) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *PostPusherParamsBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *PostPusherParamsBody) validateDeviceDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("device_display_name", "body", m.DeviceDisplayName); err != nil {
		return err
	}

	return nil
}

func (m *PostPusherParamsBody) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *PostPusherParamsBody) validateLang(formats strfmt.Registry) error {

	if err := validate.Required("lang", "body", m.Lang); err != nil {
		return err
	}

	return nil
}

func (m *PostPusherParamsBody) validatePushkey(formats strfmt.Registry) error {

	if err := validate.Required("pushkey", "body", m.Pushkey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostPusherParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostPusherParamsBody) UnmarshalBinary(b []byte) error {
	var res PostPusherParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
