// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetEventsOKBody get events o k body
// swagger:model getEventsOKBody
type GetEventsOKBody struct {

	// An array of events.
	Chunk []*GetEventsOKBodyChunkItems `json:"chunk"`

	// A token which correlates to the last value in ``chunk``. This
	// token should be used in the next request to ``/events``.
	End string `json:"end,omitempty"`

	// A token which correlates to the first value in ``chunk``. This
	// is usually the same token supplied to ``from=``.
	Start string `json:"start,omitempty"`
}

// Validate validates this get events o k body
func (m *GetEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEventsOKBody) validateChunk(formats strfmt.Registry) error {

	if swag.IsZero(m.Chunk) { // not required
		return nil
	}

	for i := 0; i < len(m.Chunk); i++ {
		if swag.IsZero(m.Chunk[i]) { // not required
			continue
		}

		if m.Chunk[i] != nil {
			if err := m.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEventsOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEventsOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
