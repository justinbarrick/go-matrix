// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SearchOKBodySearchCategoriesRoomEvents Result Room Events
//
// Mapping of category name to search criteria.
// swagger:model searchOKBodySearchCategoriesRoomEvents
type SearchOKBodySearchCategoriesRoomEvents struct {

	// An approximate count of the total number of results found.
	Count int64 `json:"count,omitempty"`

	// groups
	Groups SearchOKBodySearchCategoriesRoomEventsGroups `json:"groups,omitempty"`

	// Highlights
	//
	// List of words which should be highlighted, useful for stemming which may change the query terms.
	Highlights []string `json:"highlights"`

	// Next Batch
	//
	// Token that can be used to get the next batch of
	// results, by passing as the `next_batch` parameter to
	// the next call. If this field is absent, there are no
	// more results.
	NextBatch string `json:"next_batch,omitempty"`

	// Results
	//
	// List of results in the requested order.
	Results []*SearchOKBodySearchCategoriesRoomEventsResultsItems `json:"results"`

	// state
	State SearchOKBodySearchCategoriesRoomEventsState `json:"state,omitempty"`
}

// Validate validates this search o k body search categories room events
func (m *SearchOKBodySearchCategoriesRoomEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchOKBodySearchCategoriesRoomEvents) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	if err := m.Groups.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("groups")
		}
		return err
	}

	return nil
}

func (m *SearchOKBodySearchCategoriesRoomEvents) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchOKBodySearchCategoriesRoomEvents) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchOKBodySearchCategoriesRoomEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchOKBodySearchCategoriesRoomEvents) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
