// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangePasswordUnauthorizedBody Authentication response
//
// Used by servers to indicate that additional authentication information is required,
// swagger:model changePasswordUnauthorizedBody
type ChangePasswordUnauthorizedBody struct {

	// A list of the stages the client has completed successfully
	Completed []string `json:"completed"`

	// Flow information
	//
	// A list of the login flows supported by the server for this API.
	// Required: true
	Flows []*ChangePasswordUnauthorizedBodyFlowsItems `json:"flows"`

	// Contains any information that the client will need to know in order to
	// use a given type of authentication. For each login type presented,
	// that type may be present as a key in this dictionary. For example, the
	// public part of an OAuth client ID could be given here.
	Params map[string]interface{} `json:"params,omitempty"`

	// This is a session identifier that the client must pass back to the home
	// server, if one is provided, in subsequent attempts to authenticate in the
	// same API call.
	Session string `json:"session,omitempty"`
}

// Validate validates this change password unauthorized body
func (m *ChangePasswordUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangePasswordUnauthorizedBody) validateFlows(formats strfmt.Registry) error {

	if err := validate.Required("flows", "body", m.Flows); err != nil {
		return err
	}

	for i := 0; i < len(m.Flows); i++ {
		if swag.IsZero(m.Flows[i]) { // not required
			continue
		}

		if m.Flows[i] != nil {
			if err := m.Flows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangePasswordUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangePasswordUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res ChangePasswordUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
